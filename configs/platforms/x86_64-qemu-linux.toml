# Architecture identifier.
arch = "x86_64" # str
# Platform identifier.
platform = "x86_64-qemu-linux" # str

#
# Platform configs
#
[plat]
# Platform family.
family = "x86-linux" # str

# Base address of the whole physical memory.
# phys-memory-base = "0x10000_0000" # uint
phys-memory-base = "0x3a00_0000" # uint
# Size of the whole physical memory. (# 256MB)
phys-memory-size = "0x1000_0000"  # uint   
# Base physical address of the kernel image.
# kernel-base-paddr = "0x10000_0000" # uint
kernel-base-paddr = "0x3a00_0000" # uint
# Base virtual address of the kernel image.
# kernel-base-vaddr = "0xffff_8000_0000_0000" # uint
kernel-base-vaddr = "0xffff_ff00_0000_0000" # uint
# Linear mapping offset, for quick conversions between physical and virtual
# addresses. (# kernel-base-vaddr - phys-memory-base)
# 0xffff_8000_0000_0000 - 0x3a00_0000
# phys-virt-offset = "0xffff_7fff_c600_0000" # uint
# 0xffff_ff00_0000_0000 - 0x3a00_0000
phys-virt-offset = "0xffff_feff_c600_0000" # uint

# Offset of bus address and phys address. some boards, the bus address is
# different from the physical address.
phys-bus-offset = 0                             # uint
# Kernel address space base.
# kernel-aspace-base = "0xffff_8000_0000_0000"    # uint
# Note: this is extremely tricky, the kernel address space base should be 0xffff_8000_0000_0000 in fact.
# But, to map Linux's low memory address (below 0x3a00_0000) to the kernel address space,
# (for example, we need to map 0x1000 to 0xffff7fffc6001000), 
# we just simply decreate the kernel address space base by 0x1000_0000_0000, to 0xffff700000000000.
# So, the kernel address space base is 0xffff700000000000, and the kernel address space size is 0x00008fffffff0000.
# kernel-aspace-base = "0xffff_7000_0000_0000"    # uint
# kernel-aspace-size = "0x0000_7fff_ffff_f000"    # uint
# kernel-aspace-size = "0x0000_8fff_ffff_f000"    # uint

# kernel-aspace-base = "0xffff_ff00_0000_0000"    # uint
# Note: this is extremely tricky, the kernel address space base should be 0xffff_ff00_0000_0000 in fact.
# But, to map Linux's low memory address (below 0x3a00_0000) to the kernel address space,
# (for example, we need to map 0x1000 to 0xfffffeffc6001000), 
# we just simply decreate the kernel address space base by 0x1_0000_0000, to 0xffff_feff_0000_0000.
# So, the kernel address space base is 0xffff_feff_0000_0000, and the kernel address space size is 0x0000_0100_ffff_f000.
kernel-aspace-base = "0xffff_feff_0000_0000"    # uint
# Kernel address space size.
# kernel-aspace-size = "0x0000_00ff_ffff_f000"    # uint
kernel-aspace-size = "0x0000_0100_ffff_f000"    # uint

# FFFFFEFFC6000000

#
# Device specifications
#
[devices]
# MMIO regions with format (`base_paddr`, `size`).
mmio-regions = [
    [0xb000_0000, 0x1000_0000], # PCI config space
    [0xfe00_0000, 0xc0_0000],   # PCI devices
    [0xfec0_0000, 0x1000],      # IO APIC
    [0xfed0_0000, 0x1000],      # HPET
    [0xfee0_0000, 0x1000],      # Local APIC
]                               # [(uint, uint)]
# VirtIO MMIO regions with format (`base_paddr`, `size`).
virtio-mmio-regions = []        # [(uint, uint)]
# Base physical address of the PCIe ECAM space (should read from ACPI 'MCFG' table).
pci-ecam-base = 0xb000_0000 # uint
# End PCI bus number.
pci-bus-end = 0xff # uint
# PCI device memory ranges (not used on x86).
pci-ranges = []     # [(uint, uint)]

# Timer interrupt frequencyin Hz. (4.0GHz)
timer-frequency = 4_000_000_000     # uint
